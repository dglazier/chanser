//////////////////////////////////////////////////////////////
///
///Class:		
///Description:
///     DC Fiducial cut in local XY variables

#pragma once

#include "BaseCut.h"

namespace chanser{


  class DC_FiducialCut_XY : public chanser::BaseCut{

    using Array4D = std::vector<std::vector<std::vector<std::vector<double>>>>;
      
  public:
    DC_FiducialCut_XY()=default; // must have default constructor
    DC_FiducialCut_XY(Int_t layer, Int_t field){_regionVal = layer, _fieldVal=field;}
    
      
      
    Bool_t ParticleCut(const chanser::BaseParticle* part) const noexcept override{
      auto c12p = static_cast<const chanser::CLAS12Particle*>(part);
      auto c12=c12p->CLAS12(); //if you require other DST data
      
      if(c12->getRegion()!=clas12::FD) return true; //cut only appies to FD

const double maxparams_in[6][6][3][2] = 
{{{{-14.563, 0.60032},{-19.6768, 0.58729},{-22.2531, 0.544896}},
{{-12.7486, 0.587631},{-18.8093, 0.571584},{-19.077, 0.519895}},
{{-11.3481, 0.536385},{-18.8912, 0.58099},{-18.8584, 0.515956}},
{{-10.7248, 0.52678},{-18.2058, 0.559429},{-22.0058, 0.53808}},
{{-16.9644, 0.688637},{-17.1012, 0.543961},{-21.3974, 0.495489}},
{{-13.4454, 0.594051},{-19.4173, 0.58875},{-22.8771, 0.558029}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}}};


const double minparams_in[6][6][3][2] =
{{{{12.2692, -0.583057},{17.6233, -0.605722},{19.7018, -0.518429}},
{{12.1191, -0.582662},{16.8692, -0.56719},{20.9153, -0.534871}},
{{11.4562, -0.53549},{19.3201, -0.590815},{20.1025, -0.511234}},
{{13.202, -0.563346},{20.3542, -0.575843},{23.6495, -0.54525}},
{{12.0907, -0.547413},{17.1319, -0.537551},{17.861, -0.493782}},
{{13.2856, -0.594915},{18.5707, -0.597428},{21.6804, -0.552287}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}},
{{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},
{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}},{{0, 0},{0, 0},{0, 0}}}};


const double maxparams_out[6][6][3][2] = {
{{{-15.0486, 0.72351},{-19.2202, 0.611078},{-27.4513, 0.535668}},
{{-27.5984, 0.856463},{-16.7873, 0.601081},{-23.1163, 0.552932}},
{{-10.4537, 0.698218},{-13.8137, 0.559658},{-35.1087, 0.605458}},
{{-15.2615, 0.747703},{-18.0476, 0.598169},{-26.6229, 0.540454}},
{{-13.2849, 0.669102},{-11.4523, 0.50548},{-14.619, 0.448236}},
{{-13.9748, 0.706217},{-19.2459, 0.61829},{-32.0969, 0.586403}}},
{{{1.01396, 0.498685},{-15.5912, 0.576023},{-15.1113, 0.532929}},
{{-5.78163, 0.558017},{-16.2599, 0.579884},{-18.757, 0.553068}},
{{-5.85198, 0.563657},{-12.8175, 0.560827},{-16.0893, 0.53454}},
{{-4.73676, 0.550713},{-15.9589, 0.578277},{-16.4839, 0.533793}},
{{-6.246, 0.567365},{-14.435, 0.570721},{-15.4366, 0.531068}},
{{-6.97001, 0.576377},{-14.6786, 0.568779},{-19.7683, 0.560218}}},
{{{-5.11874, 0.542303},{-15.0805, 0.574983},{-14.4774, 0.525724}},
{{-12.0383, 0.614845},{-13.7267, 0.563175},{-15.0412, 0.526371}},
{{-6.03209, 0.557031},{-13.7801, 0.565532},{-17.3829, 0.544538}},
{{-5.11456, 0.544146},{-12.2437, 0.550863},{-17.309, 0.543019}},
{{-10.4872, 0.598711},{-10.4236, 0.532708},{-14.3734, 0.53108}},
{{-1.0749, 0.520489},{-12.8321, 0.562083},{-16.5056, 0.5455}}},
{{{-4.02259, 0.524186},{-17.1253, 0.594224},{-18.2492, 0.548083}},
{{-9.8687, 0.599888},{-16.4612, 0.586687},{-13.8826, 0.523052}},
{{-6.09038, 0.565961},{-17.7112, 0.599618},{-15.4107, 0.527006}},
{{-7.39969, 0.589083},{-17.9769, 0.601895},{-11.6827, 0.508671}},
{{-9.4989, 0.597539},{-14.5596, 0.570631},{-11.0431, 0.511108}},
{{-4.78634, 0.541011},{-15.7703, 0.58688},{-13.4413, 0.527737}}},
{{{-8.52794, 0.597096},{-15.7673, 0.578371},{-15.3708, 0.532371}},
{{-9.93026, 0.599944},{-18.9386, 0.600393},{-16.9471, 0.538744}},
{{-6.97351, 0.580954},{-14.787, 0.571151},{-14.7902, 0.535692}},
{{-10.1381, 0.61534},{-15.7761, 0.578828},{-12.4601, 0.516824}},
{{-6.96808, 0.575769},{-16.8735, 0.59029},{-16.5667, 0.546479}},
{{-4.66291, 0.557931},{-12.8325, 0.564619},{-15.4321, 0.532078}}},
{{{-7.04376, 0.566423},{-17.1298, 0.584139},{-5.45416, 0.378063}},
{{-8.44714, 0.587986},{-18.1342, 0.594626},{1.15458, 0.235862}},
{{-5.94346, 0.565299},{-13.1923, 0.544233},{-9.35298, 0.356599}},
{{-6.21599, 0.565299},{-17.3319, 0.592404},{-9.93697, 0.490374}},
{{-4.59187, 0.547947},{-18.6261, 0.617462},{-4.56516, 0.318076}},
{{-4.51481, 0.54217},{-15.5234, 0.586091},{-3.33085, 0.406969}}}};


const double minparams_out[6][6][3][2] = {
{{{10.4534, -0.646633},{20.3057, -0.634014},{19.8023, -0.456707}},
{{8.39762, -0.604501},{16.3439, -0.594578},{24.3968, -0.550637}},
{{11.7765, -0.682773},{18.4467, -0.616169},{33.5937, -0.587674}},
{{10.3321, -0.651872},{20.2277, -0.636832},{18.6805, -0.5109}},
{{7.23971, -0.624146},{15.3243, -0.578226},{19.042, -0.50646}}, 
{{11.3041, -0.656507},{17.9646, -0.598628},{20.7513, -0.490774}}},
{{{2.38471, -0.519764},{17.37, -0.58695},{18.0912, -0.543571}},
{{5.54502, -0.55162},{15.7411, -0.574163},{14.124, -0.527875}},
{{-2.07845, -0.477191},{17.6555, -0.581425},{19.773, -0.545526}},
{{0.0286526, -0.510017},{14.3589, -0.569907},{18.4092, -0.553169}},
{{4.65436, -0.546023},{16.5496, -0.579403},{16.1278, -0.53216}},
{{2.42162, -0.520676},{13.5759, -0.557783},{15.4258, -0.523538}}},
{{{5.42714, -0.547252},{17.9145, -0.586462},{12.5151, -0.50246}},
{{1.34431, -0.50385},{15.4816, -0.56814},{14.8332, -0.530269}},
{{4.21559, -0.534567},{16.107, -0.56405},{13.833, -0.514593}},
{{4.20743, -0.536347},{15.2913, -0.571454},{16.8639, -0.534427}},
{{6.1354, -0.558451},{15.8315, -0.575873},{16.3529, -0.541569}},
{{8.68088, -0.575933},{16.4584, -0.576239},{15.6839, -0.534505}}},
{{{4.68623, -0.547042},{15.677, -0.565814},{15.9174, -0.525793}},
{{5.63431, -0.550919},{16.3397, -0.582825},{13.0206, -0.519814}},
{{10.7146, -0.609206},{17.798, -0.588528},{17.5752, -0.535447}},
{{5.60915, -0.55906},{15.9808, -0.582329},{15.4179, -0.531727}},
{{5.02979, -0.550918},{16.5882, -0.588454},{14.8774, -0.521648}},
{{11.0076, -0.616694},{16.3595, -0.578062},{14.1671, -0.52539}}},
{{{7.23685, -0.571469},{12.413, -0.523034},{10.2567, -0.43924}},
{{2.89157, -0.524202},{13.7971, -0.541647},{16.9268, -0.51881}},
{{7.39136, -0.564481},{15.7659, -0.579543},{13.2347, -0.51334}},
{{5.30074, -0.555581},{8.29014, -0.455451},{10.9363, -0.504937}},
{{8.93705, -0.586499},{15.6892, -0.575975},{10.5961, -0.455508}},
{{9.26221, -0.591506},{14.466, -0.565013},{15.2475, -0.53195}}},
{{{7.31173, -0.576571},{15.7123, -0.594739},{19.0354, -0.499379}},
{{8.07107, -0.591361},{17.1351, -0.603906},{-0.239706, -0.24005}},
{{7.83093, -0.577219},{11.579, -0.516213},{14.2709, -0.394561}},
{{9.06302, -0.600711},{18.5039, -0.616063},{-3.86975, -0.213802}},
{{4.71687, -0.547772},{18.0103, -0.604119},{10.7901, -0.437388}},
{{7.17946, -0.57369},{11.2732, -0.397794},{-2.79229, -0.137468}}}};

 bool inbending;

 if(_fieldVal == 1)
   {//positive outbending
     inbending = false;
   }
 if(_fieldVal == -1)
   {//negative outbending
     inbending = true;
   }

const auto minparams = (inbending ? minparams_in : minparams_out);
const auto maxparams = (inbending ? maxparams_in : maxparams_out);


double X;
double Y;
 Double_t Pival = TMath::Pi();
 auto sector = c12->getSector();

 X = c12->traj(6,_regionVal)->getX();
 Y = c12->traj(6,_regionVal)->getY();


 if(sector == 2)
{
const double X_new = X * std::cos(-60 * Pival / 180.) - Y * std::sin(-60 * Pival / 180.);
Y = X * std::sin(-60 * Pival / 180.) + Y * std::cos(-60 * Pival / 180.);
X = X_new;
}

 else if(sector == 3)
{
const double X_new = X * std::cos(-120 * Pival / 180.) - Y * std::sin(-120 * Pival / 180.);
Y = X * std::sin(-120 * Pival / 180.) + Y * std::cos(-120 * Pival / 180.);
X = X_new;
}

 else if(sector == 4)
{
const double X_new = X * std::cos(-180 * Pival / 180.) - Y * std::sin(-180 * Pival / 180.);
Y = X * std::sin(-180 * Pival / 180.) + Y * std::cos(-180 * Pival / 180.);
X = X_new;
}

 else if(sector == 5)
{
const double X_new = X * std::cos(120 * Pival / 180.) - Y * std::sin(120 * Pival / 180.);
Y = X * std::sin(120 * Pival / 180.) + Y * std::cos(120 * Pival / 180.);
X = X_new;
}

 else if(sector == 6)
{
const double X_new = X * std::cos(60 * Pival / 180.) - Y * std::sin(60 * Pival / 180.);
Y = X * std::sin(60 * Pival / 180.) + Y * std::cos(60 * Pival / 180.);
X = X_new;
}

int pid = 0;
 Int_t _partPidVal = c12->par()->getPid();

 if(_partPidVal == 11) pid = 0;
 else if(_partPidVal == 2212) pid = 1;
 else if(_partPidVal == 211) pid = 2;
 else if(_partPidVal == -211) pid = 3;
 else if(_partPidVal == 321) pid = 4;
 else if(_partPidVal == -321) pid = 5;

 Int_t layer = 5;
 if(_regionVal==6){layer=0;}
 else if(_regionVal==18){layer=1;}
 else if(_regionVal==36){layer=2;}

if(inbending == true) pid = 0; // use only for electrons in inbending case

 double calc_min = minparams[pid][sector - 1][layer][0] + minparams[pid][sector - 1][layer][1] * X;
 double calc_max = maxparams[pid][sector - 1][layer][0] + maxparams[pid][sector - 1][layer][1] * X;

return ((Y > calc_min) && (Y < calc_max));

      /* return  c12p->XXX <_cutVal ?  kTRUE :  kFALSE;*/
    }
      
    
    void Print(Option_t* option = "")const final{
      std::cout<<"\t\t"<<ClassName()<<" applied "<<std::endl;
    }

  private:
    Int_t _regionVal = chanser::THIS_INT_MAX2;
    Int_t _fieldVal = chanser::THIS_INT_MAX2;
    Array4D maxparams_in;
    Array4D maxparams_out;
    Array4D minparams_in;
    Array4D minparams_out;
      
    ClassDefOverride(chanser::DC_FiducialCut_XY,1);

  };//class DC_FiducialCut_XY

}
